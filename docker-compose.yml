---
services:
  postgresql:
    image: postgres
    container_name: bi-system_db_postgres
    ports:
      - 5432:5432
    volumes:
      - ./volumes/postgresql:/var/lib/postgresql/data
    networks:
      - app_network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  nginx:
    image: nginx:stable-alpine
    container_name: bi-system_nginx
    user: root
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./volumes/html:/usr/share/nginx/html"
      - "./config/nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "./config/nginx/ssl:/etc/nginx/ssl"
    networks:
      - app_network
    depends_on:
      - backend
      - frontend



  prometheus:
    image: prom/prometheus
    container_name: bi-system_prometheus
    user: root #плохая практика (но друго решения пока не нашел )
    ports:
      - 9090:9090
    networks:
      - app_network
    volumes:
      - "./volumes/prometheus_data:/prometheus"
      - "./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    depends_on:
      - backend
      - frontend
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'


  node-exporter:
    image: prom/node-exporter
    container_name: bi-system_node_exporter
    ports:
      - 9100:9100
    networks:
      - app_network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: bi-system_nginx_exporter
    ports:
      - 9113:9113
    command:
      - '-nginx.scrape-uri=http://nginx:80/stub_status'
    networks:
      - app_network
    depends_on:
      - nginx

  grafana:
    image: grafana/grafana:latest
    container_name: bi-system_grafana
    user: root
    ports:
      - 3000:3000
    networks:
      - app_network
    volumes:
      - "./volumes/grafana-data:/var/lib/grafana"
      - "./config/grafana/grafana.ini:/etc/grafana/grafana.ini"
      - "./config/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml"
      - "./config/grafana/dashboards:/etc/grafana/provisioning/dashboards"

  backend:
    image: $DOCKER_IMAGE_BACKEND
    container_name: bi-system_backend
    ports:
      - 8080:8080
    environment:
      - JWT_KEY=${JWT_KEY}
      - JWT_EXPIRES_IN_MINUTES=${JWT_EXPIRES_IN_MINUTES}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - SECRET_KEY=${SECRET_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - app_network
    depends_on:
      postgresql:
        condition: service_healthy

  frontend:
    image: $DOCKER_IMAGE_FRONTEND
    container_name: bi-system_frontend
    ports:
      - 4000:4000
    networks:
      - app_network
    depends_on:
      - backend

networks:
  app_network:
    driver: bridge

